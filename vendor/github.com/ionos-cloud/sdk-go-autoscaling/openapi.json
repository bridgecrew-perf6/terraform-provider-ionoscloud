{
  "openapi": "3.0.3",
  "info": {
    "title": "VM Auto Scaling service (CloudAPI)",
    "description": "VM Auto Scaling service enables IONOS clients to horizontally scale the number of VM instances, based on configured rules. Use Auto Scaling to ensure you will have a sufficient number of instances to handle your application loads at all times.\n\nCreate an Auto Scaling group that contains the server instances; Auto Scaling service will ensure that the number of instances in the group is always within these limits.\n\nWhen target replica count is specified, Auto Scaling will maintain the set number on instances.\n\nWhen scaling policies are specified, Auto Scaling will create or delete instances based on the demands of your applications. For each policy, specified scale-in and scale-out actions are performed whenever the corresponding thresholds are met.",
    "version": "1-SDK.1",
    "contact": {
      "name": "IONOS Cloud Support",
      "email": "support@cloud.ionos.com",
      "url": "https://docs.ionos.com/faq/contact"
    },
    "termsOfService": "https://www.ionos.de/terms-gtc/terms-enterprise-cloud/enterprise-terms/"
  },
  "externalDocs": {
    "description": "More documentation",
    "url": "https://docs.ionos.com/cloud"
  },
  "servers": [
    {
      "url": "https://api.ionos.com",
      "description": "Production"
    }
  ],
  "security": [
    {
      "basicAuth": []
    },
    {
      "tokenAuth": []
    }
  ],
  "tags": [
    {
      "name": "Groups",
      "description": "An autoscaling group manages a set of VMs by changing the number of instances (the replica count), based on a given metric. Note the limits on the maximum number of groups, the maximum number of servers, and the minimum delta between the ‘scaleIn’ and ‘scaleOut’ thresholds.\n\nThis operation is restricted to contract owner, admin, and users with permissions for accessing the data center, hosting the autoscaling group."
    },
    {
      "name": "Documentation",
      "description": "Endpoints for documentation purpose."
    }
  ],
  "paths": {
    "/cloudapi/autoscaling/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List autoscaling groups",
        "description": "List all autoscaling groups for your account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupCollection"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsGet"
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create autoscaling groups",
        "description": "Create autoscaling groups with this POST method. Creation of a group will trigger the creation of two monitoring alarms, for ‘Scale In’ and ‘Scale Out’ operations, according to \"policy\" settings.\n\n \"properties.name\" must not be null or blank.\n\n \"properties.targetReplicaCount\" is optional attribute which must be >= minReplicaCount and <= maxReplicaCount if provided in the request body.\n\n \"properties.minReplicaCount\" must be >= 0 and <= 200.\n\n \"properties.maxReplicaCount\" must be >= 0 and <= 200.\n\n \"properties.datacenter.id\" must be a valid data center ID.\n\n \"properties.policy.metric\" must be one of: INSTANCE_CPU_UTILIZATION_AVERAGE, INSTANCE_NETWORK_IN_BYTES, INSTANCE_NETWORK_OUT_BYTES, INSTANCE_NETWORK_IN_PACKETS, INSTANCE_NETWORK_OUT_PACKETS.\n\n \"properties.policy.unit\" must be one of:  PER_SECOND, PER_MINUTE, PER_HOUR, TOTAL.\n TOTAL can be combined only with INSTANCE_CPU_UTILIZATION_AVERAGE.\n\n \"properties.policy.range\" must be >= 2 minutes.\n\n If \"properties.policy.unit\" is \"TOTAL\", then \"properties.policy.scaleOutThreshold - properties.policy.scaleInThreshold\" must be >= 40. \n\n \"properties.policy.scaleInAction.amount\" (the same is true for \"properties.policy.scaleOutAction.amount\") must be: \n in case of properties.policy.scaleInAction.amountType = ABSOLUTE: 1 <= properties.policy.scaleInAction.amount <= 10\n in case of properties.policy.scaleInAction.amountType = PERCENTAGE: 1 <= properties.policy.scaleInAction.amount <= 200\n\n \"properties.policy.scaleInAction.cooldownPeriod\" (the same is true for \"properties.policy.scaleOutAction.cooldownPeriod\") must be: >= 2 minutes and <= 24 hours with a default value of 5 minutes if not provided in the request payload or given with null, empty string or spaces.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Group"
                  },
                  {
                    "properties": {
                      "properties": {
                        "required": [
                          "maxReplicaCount",
                          "minReplicaCount",
                          "name",
                          "policy",
                          "replicaConfiguration",
                          "data center",
                          "location"
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user-provided resource was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupPostResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "422": {
            "$ref": "#/components/responses/response_failure_validate_group"
          },
          "400": {
            "$ref": "#/components/responses/response_failure_parse"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsPost"
      }
    },
    "/cloudapi/autoscaling/groups/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve autoscaling groups by UUID",
        "description": "Retrieve the details for the autoscaling group with the specified UUID.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsFindById"
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update autoscaling groups",
        "description": "Update the specified autoscaling group.\n\"properties.datacenter.id\" is immutable after creation and cannot be updated.\n The other validations are the same as when creating a group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/groupId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user-provided resource was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/response_failure_parse"
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsPut"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Delete autoscaling groups.",
        "description": "Delete the specified autoscaling group; deletion of the associated servers and volumes is presently not implemented.",
        "parameters": [
          {
            "$ref": "#/components/parameters/groupId"
          }
        ],
        "responses": {
          "204": {
            "description": "The requested resource was deleted."
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsDelete"
      }
    },
    "/cloudapi/autoscaling/groups/{groupId}/actions": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve last ten actions",
        "description": "Retrieve the scaling actions for the specified autoscaling group; presently, only the last ten actions are returned.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionCollection"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsActionsGet"
      }
    },
    "/cloudapi/autoscaling/groups/{groupId}/actions/{actionId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve action details",
        "description": "Retrieve the details, such as metadata, properties, and the current status, for the specified action.",
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsActionsFindById"
      }
    },
    "/cloudapi/autoscaling/groups/{groupId}/servers": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve autoscaling group servers",
        "description": "Retrieve all servers, associated with the specified autoscaling group.\n\nPlease note that the autoscaling group server IDs are distinct from, and do not match the VM server IDs in the data center.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/depth"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerCollection"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsServersGet"
      }
    },
    "/cloudapi/autoscaling/groups/{groupId}/servers/{serverId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Retrieve group servers by UUID",
        "description": "Retrieve the properties of the specificed server in autoscaling group.\n\nPlease note that the autoscaling group server IDs are distinct from, and do not match the VM server IDs in the data center.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serverId",
            "in": "path",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/depth"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested resource was found and returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/response_failure_authenticate"
          },
          "403": {
            "$ref": "#/components/responses/response_failure_authorize"
          },
          "404": {
            "$ref": "#/components/responses/response_failure_find"
          }
        },
        "security": [
          {
            "basicAuth": []
          },
          {
            "tokenAuth": []
          }
        ],
        "operationId": "autoscalingGroupsServersFindById"
      }
    },
    "/cloudapi/autoscaling/openapi.json": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Retrieve VM autoscaling OpenAPI spec (JSON)",
        "description": "Retrieve the OpenAPI specification in JSON format.",
        "responses": {
          "200": {
            "description": "The requested resource was found and returned."
          }
        },
        "operationId": "autoscalingOpenapiJsonGet"
      }
    },
    "/cloudapi/autoscaling/openapi.yaml": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "Retrieve VM autoscaling OpenAPI spec (YAML)",
        "description": "Retrieve the OpenAPI specification in YAML format (auto-generated from the JSON).",
        "responses": {
          "200": {
            "description": "The requested resource was found and returned."
          }
        },
        "operationId": "autoscalingOpenapiYamlGet"
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "description": "You will need to base64 encode the string containing your credentials. Separate your username and password with a colon, i.e., username:password and send it as 'Authorization' request header. More details: https://en.wikipedia.org/wiki/Basic_access_authentication",
        "type": "http",
        "scheme": "basic"
      },
      "tokenAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Please provide header value as 'Bearer <token>' and don't forget to add 'Bearer' HTTP Authorization Scheme before the token."
      }
    },
    "schemas": {
      "Action": {
        "description": "A background action associated with an autoscaling group.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions/2ab638d4-b4b4-4a1a-9a33-553059364fc8"
              },
              "id": {
                "example": "2ab638d4-b4b4-4a1a-9a33-553059364fc8"
              },
              "type": {
                "example": "autoscaling-action"
              },
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetadataBasic"
                  }
                ]
              },
              "properties": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActionProperties"
                  }
                ]
              }
            }
          }
        ]
      },
      "ActionAmount": {
        "enum": [
          "ABSOLUTE",
          "PERCENTAGE"
        ],
        "type": "string",
        "example": "ABSOLUTE",
        "description": "The type of the given amount.",
        "nullable": false
      },
      "ActionCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions"
              },
              "id": {
                "example": "1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions"
              },
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ActionResource"
                }
              }
            }
          }
        ]
      },
      "ActionProperties": {
        "required": [
          "actionStatus",
          "actionType",
          "targetReplicaCount"
        ],
        "description": "Properties of the resource. Contents depend on the resource type.",
        "type": "object",
        "properties": {
          "actionStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionStatus"
              }
            ]
          },
          "actionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionType"
              }
            ]
          },
          "targetReplicaCount": {
            "format": "int64",
            "description": "This action is considered successful when the associated autoscaling group reaches this replica count.",
            "type": "integer",
            "nullable": false,
            "example": "3"
          }
        }
      },
      "ActionStatus": {
        "enum": [
          "FAILED",
          "IN_PROGRESS",
          "SUCCESSFUL"
        ],
        "type": "string",
        "example": "SUCCESSFUL",
        "readOnly": true,
        "nullable": false
      },
      "ActionType": {
        "description": "The different types of scaling actions. A `SCALE_IN` action will delete servers until the group has at most `targetReplicaCount` servers. Contrarily, a `SCALE_OUT` action will create servers until the group has at least `targetReplicaCount` servers.",
        "enum": [
          "SCALE_IN",
          "SCALE_OUT"
        ],
        "type": "string",
        "nullable": false,
        "example": "SCALE_OUT"
      },
      "AvailabilityZone": {
        "enum": [
          "AUTO",
          "ZONE_1",
          "ZONE_2"
        ],
        "type": "string",
        "example": "AUTO",
        "description": "The zone where the VMs are created using this configuration.",
        "nullable": false
      },
      "Collection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "type": {
                "example": "collection"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          }
        ]
      },
      "CpuFamily": {
        "enum": [
          "AMD_OPTERON",
          "INTEL_SKYLAKE",
          "INTEL_XEON"
        ],
        "type": "string",
        "example": "INTEL_SKYLAKE",
        "description": "CPU family for the VMs created using this configuration. If null, the VM will be created with the default CPU family for the assigned location."
      },
      "DatacenterServer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/v6/datacenters/fc5965df-f38d-4a3e-baaa-770b917e40eb/servers/84f3d7c9-9a12-4334-8add-dcacd3f867a5"
              },
              "id": {
                "example": "84f3d7c9-9a12-4334-8add-dcacd3f867a5"
              },
              "type": {
                "example": "server"
              }
            },
            "description": "Links to the actual server entity in the data center.",
            "nullable": false
          }
        ]
      },
      "Entities": {
        "description": "Entities associated with this resource. Contents depend on the resource type.",
        "type": "object",
        "readOnly": true
      },
      "Error": {
        "type": "object",
        "properties": {
          "httpStatus": {
            "format": "int32",
            "type": "integer"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "ParseError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "$ref": "#/components/schemas/ErrorUuid"
          },
          {
            "properties": {
              "httpStatus": {
                "example": 400
              },
              "messages": {
                "items": {
                  "$ref": "#/components/schemas/ErrorMessageParse"
                }
              }
            }
          }
        ]
      },
      "Error401": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "httpStatus": {
                "example": "401"
              },
              "messages": {
                "items": {
                  "$ref": "#/components/schemas/Error401Message"
                }
              }
            }
          }
        ]
      },
      "Error404": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "httpStatus": {
                "example": "404"
              },
              "messages": {
                "items": {
                  "$ref": "#/components/schemas/Error404Message"
                }
              }
            }
          }
        ]
      },
      "ErrorAuthorize": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "httpStatus": {
                "example": "403"
              },
              "messages": {
                "items": {
                  "$ref": "#/components/schemas/ErrorAuthorizeMessage"
                }
              }
            }
          }
        ]
      },
      "ErrorReplicaValidateMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": "AUTOSCALE-7"
              },
              "message": {
                "example": "Configuration cannot be used to create the required resources. Error message: [(root).entities.servers.items.[0].properties.ram] RAM of requested server too small, 256 MB is minimum."
              }
            }
          }
        ]
      },
      "ErrorGroupValidateMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": "100"
              },
              "message": {
                "example": "properties.policy.range must be at least 120 seconds."
              }
            }
          }
        ]
      },
      "ErrorUuid": {
        "type": "object",
        "properties": {
          "errorUuid": {
            "format": "uuid",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "type": "string"
          }
        }
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorMessageParse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": 122
              },
              "message": {
                "example": "Failed to parse request body. [line: 7, column: 31] The property 'wrongPropertyName' at path '.properties.wrongPropertyName' was not expected."
              }
            }
          }
        ]
      },
      "Error401Message": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": "315"
              },
              "message": {
                "example": "Unauthorized"
              }
            }
          }
        ]
      },
      "Error404Message": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": "309"
              },
              "message": {
                "example": "The requested resource does not exist."
              }
            }
          }
        ]
      },
      "ErrorAuthorizeMessage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorMessage"
          },
          {
            "properties": {
              "errorCode": {
                "example": "AUTOSCALE-10"
              },
              "message": {
                "example": "VM Autoscaling feature is not enabled for your contract."
              }
            }
          }
        ]
      },
      "ErrorGroupValidate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "properties": {
              "httpStatus": {
                "example": "422"
              },
              "messages": {
                "items": {
                  "$ref": "#/components/schemas/ErrorGroupValidateMessage"
                }
              }
            }
          }
        ]
      },
      "Group": {
        "description": "A group of virtual servers where replica count can be scaled automatically.",
        "type": "object",
        "required": [
          "properties"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Item"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036"
              },
              "id": {
                "example": "1d67ca27-d4c0-419d-9a64-9ea42dfdd036"
              },
              "type": {
                "example": "autoscaling-group"
              },
              "entities": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Entities"
                  },
                  {
                    "properties": {
                      "actions": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ActionsLinkResource"
                          }
                        ]
                      },
                      "servers": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ServersLinkResource"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              "properties": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupProperties"
                  }
                ]
              }
            }
          }
        ]
      },
      "GroupPostResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Group"
          },
          {
            "$ref": "#/components/schemas/StartedActions"
          }
        ]
      },
      "GroupUpdate": {
        "description": "Update request for an autoscaling group.",
        "type": "object",
        "required": [
          "properties"
        ],
        "properties": {
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupUpdatableProperties"
              }
            ]
          }
        }
      },
      "GroupCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups"
              },
              "id": {
                "example": "groups"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GroupResource"
                }
              }
            }
          }
        ]
      },
      "GroupPolicy": {
        "required": [
          "metric",
          "scaleInAction",
          "scaleInThreshold",
          "scaleOutAction",
          "scaleOutThreshold",
          "unit"
        ],
        "type": "object",
        "description": "Specifies the behavior of this autoscaling group. A policy consists of Triggers and Actions, whereby an Action is some kind of automated behavior, and the Trigger defines the circumstances, under which the Action is triggered. Currently, two separate Actions, namely Scaling In and Out are supported, triggered through the thresholds, defined for a given Metric.",
        "nullable": false,
        "properties": {
          "metric": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Metric"
              }
            ]
          },
          "range": {
            "format": "duration",
            "description": "Defines the time range, for which the samples will be aggregated.",
            "type": "string",
            "example": "P1D",
            "nullable": false,
            "default": "120s"
          },
          "scaleInAction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupPolicyScaleInAction"
              },
              {
                "description": "Specifies the action to take when the `scaleInThreshold` is exceeded. Hereby, scaling in is always about removing VMs that are currently associated with this autoscaling group. Default termination policy is OLDEST_SERVER_FIRST."
              }
            ]
          },
          "scaleInThreshold": {
            "description": "The lower threshold for the value of the `metric`. Will be used with `less than` (<) operator. Exceeding this will start a Scale-In action as specified by the `scaleInAction` property. The value must have a higher minimum delta to the `scaleOutThreshold` depending on the `metric` to avoid competitive actions at the same time.",
            "type": "number",
            "example": 33.0,
            "nullable": false
          },
          "scaleOutAction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupPolicyScaleOutAction"
              },
              {
                "description": "Specifies the action to take when the `scaleOutThreshold` is exceeded. Hereby, scaling out is always about adding new VMs to this autoscaling group."
              }
            ]
          },
          "scaleOutThreshold": {
            "description": "The upper threshold for the value of the `metric`.  Will be used with `greater than` (>) operator. Exceeding this will start a Scale-Out action as specified by the `scaleOutAction` property. The value must have a lower minimum delta to the `scaleInThreshold` depending on the `metric` to avoid competitive actions at the same time.",
            "type": "number",
            "example": 77.0,
            "nullable": false
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueryUnit"
              }
            ]
          }
        }
      },
      "GroupPolicyScaleInAction": {
        "required": [
          "amount",
          "amountType"
        ],
        "type": "object",
        "nullable": false,
        "properties": {
          "amount": {
            "description": "When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group's current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed. \n\nFor SCALE_IN operation now volumes are NOT deleted after the server deletion.",
            "type": "number",
            "example": 1,
            "nullable": false
          },
          "cooldownPeriod": {
            "format": "duration",
            "description": "Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given.",
            "type": "string",
            "example": "5m",
            "default": "5m",
            "nullable": true
          },
          "terminationPolicy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TerminationPolicyType"
              }
            ]
          }
        }
      },
      "TerminationPolicyType": {
        "enum": [
          "OLDEST_SERVER_FIRST",
          "NEWEST_SERVER_FIRST",
          "RANDOM"
        ],
        "type": "string",
        "example": "OLDEST_SERVER_FIRST",
        "description": "The type of the termination policy for the autoscaling group so that a specific pattern is followed for Scaling-In instances. Default termination policy is OLDEST_SERVER_FIRST",
        "nullable": true
      },
      "GroupPolicyScaleOutAction": {
        "required": [
          "amount",
          "amountType"
        ],
        "type": "object",
        "nullable": false,
        "properties": {
          "amount": {
            "description": "When `amountType == ABSOLUTE`, this is the number of VMs added or removed in one step. When `amountType == PERCENTAGE`, this is a percentage value, which will be applied to the autoscaling group's current `targetReplicaCount` in order to derive the number of VMs that will be added or removed in one step. There will always be at least one VM added or removed. \n\nFor SCALE_IN operation now volumes are NOT deleted after the server deletion.",
            "type": "number",
            "example": 1,
            "nullable": false
          },
          "amountType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionAmount"
              }
            ]
          },
          "cooldownPeriod": {
            "format": "duration",
            "description": "Minimum time to pass after this Scaling action has started, until the next Scaling action will be started. Additionally, if a Scaling action is currently in progress, no second Scaling action will be started for the same autoscaling group. Instead, the Metric will be re-evaluated after the current Scaling action is completed (either successfully or with failures). This is validated with a minimum value of 2 minutes and a maximum of 24 hours currently. Default value is 5 minutes if not given.",
            "type": "string",
            "example": "5m",
            "default": "5m",
            "nullable": true
          }
        }
      },
      "GroupProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupUpdatableProperties"
          },
          {
            "$ref": "#/components/schemas/GroupImmutableProperties"
          }
        ]
      },
      "StartedActions": {
        "type": "object",
        "properties": {
          "startedActions": {
            "description": "Any background activity caused by this request. This allows the caller to track the progress of such activity.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionResource"
            },
            "readOnly": true
          }
        }
      },
      "GroupUpdatableProperties": {
        "type": "object",
        "properties": {
          "maxReplicaCount": {
            "format": "int64",
            "description": "Maximum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.",
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "example": 10,
            "nullable": false
          },
          "minReplicaCount": {
            "format": "int64",
            "description": "Minimum replica count value for `targetReplicaCount`. Will be enforced for both automatic and manual changes.",
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "example": 1,
            "nullable": false
          },
          "targetReplicaCount": {
            "format": "int64",
            "description": "The target number of VMs in this Group. Depending on the scaling policy, this number will be adjusted automatically. VMs will be created or destroyed automatically in order to adjust the actual number of VMs to this number. If targetReplicaCount is given in the request body then it must be >= minReplicaCount and <= maxReplicaCount.",
            "maximum": 200,
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "name": {
            "description": "User-defined name for the autoscaling group.",
            "maxLength": 255,
            "type": "string",
            "example": "Autoscaling Group #1",
            "nullable": false
          },
          "policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupPolicy"
              }
            ]
          },
          "replicaConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ReplicaPropertiesPost"
              }
            ]
          }
        }
      },
      "GroupImmutableProperties": {
        "required": [
          "data center",
          "location"
        ],
        "type": "object",
        "properties": {
          "datacenter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Resource"
              },
              {
                "description": "VMs for this autoscaling group will be created in this virtual data center.",
                "properties": {
                  "href": {
                    "example": "https://api.ionos.com/cloudapi/v6/datacenters/09043280-aafc-49f7-a048-d61673f52024"
                  },
                  "type": {
                    "example": "datacenter"
                  },
                  "id": {
                    "example": "09043280-aafc-49f7-a048-d61673f52024",
                    "readOnly": false
                  }
                }
              }
            ]
          },
          "location": {
            "description": "Location of the data center.",
            "type": "string",
            "example": "de/txl",
            "readOnly": true
          }
        }
      },
      "Item": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Metadata"
                  }
                ]
              },
              "properties": {
                "description": "Properties of the resource. Contents depend on the resource type.",
                "type": "object"
              }
            }
          }
        ]
      },
      "Metadata": {
        "required": [
          "createdBy",
          "createdByUserId",
          "createdDate",
          "etag",
          "lastModifiedBy",
          "lastModifiedByUserId",
          "lastModifiedDate",
          "state"
        ],
        "description": "Metadata about the resource",
        "type": "object",
        "readOnly": true,
        "properties": {
          "createdBy": {
            "description": "The user who created the resource.",
            "type": "string",
            "example": "user@mail.local",
            "nullable": false
          },
          "createdByUserId": {
            "description": "The user who created the resource.",
            "type": "string",
            "example": "919e4752-e700-40b1-9507-5ac545bb6355",
            "nullable": false
          },
          "createdDate": {
            "format": "date-time",
            "description": "When the resource was created.",
            "example": "2021-06-21T08:46:01.249829Z",
            "type": "string",
            "nullable": false
          },
          "etag": {
            "description": "Resource etag",
            "type": "string",
            "nullable": false
          },
          "lastModifiedBy": {
            "description": "The last user who modified the resource.",
            "type": "string",
            "example": "user@mail.local",
            "nullable": false
          },
          "lastModifiedByUserId": {
            "description": "The last user who modified the resource.",
            "type": "string",
            "example": "919e4752-e700-40b1-9507-5ac545bb6355",
            "nullable": false
          },
          "lastModifiedDate": {
            "format": "date-time",
            "description": "When the resource was last modified.",
            "type": "string",
            "example": "2021-07-26T09:30:39.562006Z",
            "nullable": false
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataState"
              },
              {
                "description": "Resource state",
                "nullable": false,
                "example": "AVAILABLE"
              }
            ]
          }
        }
      },
      "ItemBasic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "metadata": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetadataBasic"
                  }
                ]
              },
              "properties": {
                "description": "Properties of the resource. Contents depend on the resource type.",
                "type": "object"
              }
            }
          }
        ]
      },
      "MetadataBasic": {
        "required": [
          "createdDate",
          "etag",
          "lastModifiedDate",
          "state"
        ],
        "description": "Metadata about the resource",
        "type": "object",
        "readOnly": true,
        "properties": {
          "createdDate": {
            "format": "date-time",
            "description": "When the resource was created.",
            "example": "2021-06-21T08:46:01.249829Z",
            "type": "string",
            "nullable": false
          },
          "etag": {
            "description": "Resource etag",
            "type": "string",
            "nullable": false
          },
          "lastModifiedDate": {
            "format": "date-time",
            "description": "When the resource was last modified.",
            "type": "string",
            "example": "2021-07-26T09:30:39.562006Z",
            "nullable": false
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MetadataState"
              },
              {
                "description": "Resource state",
                "nullable": false,
                "example": "AVAILABLE"
              }
            ]
          }
        }
      },
      "MetadataState": {
        "enum": [
          "AVAILABLE",
          "BUSY",
          "INACTIVE",
          "SUSPENDED"
        ],
        "type": "string",
        "example": "AVAILABLE"
      },
      "Metric": {
        "enum": [
          "INSTANCE_CPU_UTILIZATION_AVERAGE",
          "INSTANCE_NETWORK_IN_BYTES",
          "INSTANCE_NETWORK_IN_PACKETS",
          "INSTANCE_NETWORK_OUT_BYTES",
          "INSTANCE_NETWORK_OUT_PACKETS"
        ],
        "type": "string",
        "example": "INSTANCE_CPU_UTILIZATION_AVERAGE",
        "description": "The Metric that should trigger the scaling actions. Metric values are checked at fixed intervals.",
        "nullable": false
      },
      "QueryUnit": {
        "enum": [
          "PER_HOUR",
          "PER_MINUTE",
          "PER_SECOND",
          "TOTAL"
        ],
        "type": "string",
        "default": "TOTAL",
        "example": "PER_MINUTE",
        "description": "Units of the applied Metric.",
        "nullable": false
      },
      "Resource": {
        "type": "object",
        "nullable": false,
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "format": "uuid",
            "description": "Unique resource identifier",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "description": "Resource type",
            "type": "string",
            "readOnly": true
          },
          "href": {
            "format": "uri",
            "description": "Absolute URL to the resource's representation.",
            "type": "string",
            "readOnly": true,
            "example": "https://api.ionos.com/cloudapi/autoscaling"
          }
        }
      },
      "ServerResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers/896f8ab3-595c-4489-828d-70df816e51bd"
              },
              "id": {
                "example": "896f8ab3-595c-4489-828d-70df816e51bd"
              },
              "type": {
                "example": "autoscaling-server"
              }
            }
          }
        ]
      },
      "ActionResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions/d8df1964-e923-4e63-af45-4c25d6687674"
              },
              "id": {
                "example": "d8df1964-e923-4e63-af45-4c25d6687674"
              },
              "type": {
                "example": "autoscaling-action"
              }
            }
          }
        ]
      },
      "ActionsLinkResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "description": "Scaling actions of the autoscaling group",
            "readOnly": true,
            "properties": {
              "id": {
                "example": "1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions"
              },
              "type": {
                "example": "collection"
              },
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/actions"
              }
            }
          }
        ]
      },
      "ServersLinkResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "description": "Servers of the autoscaling group",
            "readOnly": true,
            "properties": {
              "id": {
                "example": "1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers"
              },
              "type": {
                "example": "collection"
              },
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers"
              }
            }
          }
        ]
      },
      "GroupResource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Resource"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/954f32fd-5ed5-4b2d-8b66-3981e6c105dd"
              },
              "id": {
                "example": "954f32fd-5ed5-4b2d-8b66-3981e6c105dd"
              },
              "type": {
                "example": "autoscaling-group"
              }
            }
          }
        ]
      },
      "Server": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemBasic"
          },
          {
            "description": "Links a data center server to an autoscaling group. Please note that this entities UUID is different from that of the data center server, whose UUID is stored in the `datacenterServer` property.",
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers/20fd2b30-be53-4253-9d8e-96af69e24d57"
              },
              "id": {
                "example": "20fd2b30-be53-4253-9d8e-96af69e24d57"
              },
              "type": {
                "example": "autoscaling-server"
              },
              "properties": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ServerProperties"
                  }
                ]
              }
            }
          }
        ]
      },
      "ServerCollection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "properties": {
              "href": {
                "example": "https://api.ionos.com/cloudapi/autoscaling/groups/1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers"
              },
              "id": {
                "example": "1d67ca27-d4c0-419d-9a64-9ea42dfdd036/servers"
              },
              "items": {
                "items": {
                  "$ref": "#/components/schemas/ServerResource"
                }
              }
            }
          }
        ]
      },
      "ServerProperties": {
        "required": [
          "datacenterServer"
        ],
        "type": "object",
        "properties": {
          "datacenterServer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterServer"
              }
            ]
          },
          "name": {
            "type": "string",
            "example": "Web server instance"
          }
        }
      },
      "ReplicaNic": {
        "type": "object",
        "required": [
          "lan",
          "name"
        ],
        "properties": {
          "lan": {
            "format": "int32",
            "description": "Lan ID for this replica Nic.",
            "minimum": 1,
            "example": 1,
            "type": "integer"
          },
          "name": {
            "description": "Name for this replica NIC.",
            "maxLength": 255,
            "type": "string",
            "example": "LAN NIC 1",
            "nullable": false
          },
          "dhcp": {
            "description": "Dhcp flag for this replica Nic. This is an optional attribute with default value of 'true' if not given in the request payload or given as null.",
            "type": "boolean",
            "example": "true",
            "nullable": true
          }
        }
      },
      "ReplicaProperties": {
        "required": [
          "availabilityZone",
          "cores",
          "ram"        ],
        "type": "object",
        "nullable": false,
        "properties": {
          "availabilityZone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailabilityZone"
              }
            ]
          },
          "cores": {
            "format": "int32",
            "description": "The total number of cores for the VMs.",
            "minimum": 1,
            "example": 2,
            "type": "integer",
            "nullable": false
          },
          "cpuFamily": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CpuFamily"
              }
            ]
          },
          "nics": {
            "description": "List of NICs associated with this Replica.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplicaNic"
            }
          },
          "ram": {
            "format": "int32",
            "description": "The amount of memory for the VMs in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set ramHotPlug to TRUE then you must use a minimum of 1024 MB. If you set the RAM size more than 240GB, then ramHotPlug will be set to FALSE and can not be set to TRUE unless RAM size not set to less than 240GB.",
            "type": "integer",
            "example": "2048",
            "nullable": false
          }
        }
      },
      "ReplicaPropertiesPost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReplicaProperties"
          },
          {
            "properties": {
              "volumes": {
                "description": "List of volumes associated with this Replica. Only a single volume is currently supported.",
                "maxItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReplicaVolumePost"
                }
              }
            }
          }
        ]
      },
      "ReplicaPropertiesGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReplicaProperties"
          },
          {
            "type": "object",
            "properties": {
              "volumes": {
                "description": "List of volumes associated with this Replica. Only a single volume is currently supported.",
                "maxItems": 1,
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ReplicaVolumeGet"
                }
              }
            }
          }
        ]
      },
      "ReplicaVolumeGet": {
        "required": [
          "image",
          "type",
          "name",
          "size"
        ],
        "type": "object",
        "properties": {
          "image": {
            "format": "uuid",
            "description": "The image installed on the volume. Only the UUID of the image is presently supported.",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "example": "6e928bd0-3a8e-4821-a20a-54984b0c2d21",
            "type": "string",
            "nullable": false
          },
          "name": {
            "description": "Name of the replica volume.",
            "maxLength": 255,
            "type": "string",
            "example": "Volume 1",
            "nullable": false
          },
          "size": {
            "format": "int32",
            "description": "User-defined size for this replica volume in GB.",
            "minimum": 1,
            "example": 30,
            "type": "integer"
          },
          "sshKeys": {
            "description": "Ssh keys that has access to the volume.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q== user@domain.local"
            }
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeHwType"
              }
            ]
          },
          "userData": {
            "description": "user-data (Cloud Init) for this replica volume.",
            "type": "string",
            "example": "ZWNobyAiSGVsbG8sIFdvcmxkIgo="
          }
        }
      },
      "ReplicaVolumePost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReplicaVolumeGet"
          },
          {
            "properties": {
              "imagePassword": {
                "description": "Image password for this replica volume.",
                "example": "passw0rd",
                "type": "string"
              }
            }
          }
        ]
      },
      "VolumeHwType": {
        "enum": [
          "HDD",
          "SSD",
          "SSD_PREMIUM",
          "SSD_STANDARD"
        ],
        "type": "string",
        "example": "SSD",
        "nullable": false,
        "description": "Storage Type for this replica volume (SSD or HDD)."
      }
    },
    "responses": {
      "response_failure_authenticate": {
        "description": "The request was not properly authenticated.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error401"
            }
          }
        }
      },
      "response_failure_authorize": {
        "description": "The user does not have the required privileges.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorAuthorize"
            }
          }
        }
      },
      "response_failure_find": {
        "description": "The requested resource does not exist.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error404"
            }
          }
        }
      },
      "response_failure_parse": {
        "description": "The request body could not be parsed.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ParseError"
            }
          }
        }
      },
      "response_failure_validate_group": {
        "description": "The user-provided resource did not pass all validations.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ErrorGroupValidate"
                },
                {
                  "properties": {
                    "httpStatus": {
                      "example": "422"
                    },
                    "messages": {
                      "items": {
                        "$ref": "#/components/schemas/ErrorGroupValidateMessage"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    "parameters": {
      "depth": {
        "name": "depth",
        "in": "query",
        "description": "Controls the detail depth of the response objects.\n\n  - depth=0: Only direct properties are included; children (such as executions or transitions) are not included.\n\n  - depth=1: Direct properties and children references are included.\n\n  - depth=2: Direct properties and children properties are included.\n\n  - depth=3: Direct properties and children properties and children's children are included.\n\n  - depth=... and so on\n\n",
        "schema": {
          "default": "0",
          "type": "number"
        }
      },
      "orderBy": {
        "name": "orderBy",
        "in": "query",
        "description": "Define the property to be used for ordering the returned list; valid values are 'createdDate' and 'lastModifiedDate'.",
        "schema": {
          "default": "createdDate",
          "type": "string"
        }
      },
      "groupId": {
        "name": "groupId",
        "in": "path",
        "required": true,
        "schema": {
          "format": "uuid",
          "type": "string"
        }
      }
    }
  }
}
